apply plugin: 'com.android.application'

android {
    compileSdkVersion Integer.parseInt(rootProject.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion '28.0.3'

    /**
     * 设置一些默认属性，其可用属性是buildTypes和ProductFlavors之和
     */
    defaultConfig {
        applicationId "me.febsky.weibosou"
        minSdkVersion Integer.parseInt(rootProject.ANDROID_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(rootProject.ANDROID_TARGET_SDK_VERSION)
        versionCode 101
        versionName "1.0.1"
        // dex突破65535的限制
        multiDexEnabled true

        flavorDimensions "dimension"//
        // 声明需要使用注解功能
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }

    }

    signingConfigs {
        release {
            storeFile file("adorkable.jks")
            storePassword "adorkable"
            keyAlias "adorkable_alias"
            keyPassword "adorkable"
        }
        debug {

        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "测试代码"
            debuggable true
            // 自定义是否显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            signingConfig signingConfigs.debug
        }
        release {
            //生成的APK是否支持调试本地代码
            jniDebuggable false
            //不可调试
            debuggable false
            //启用混淆
            minifyEnabled true
            //对APK包执行ZIP对齐优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.release
            resValue "string", "app_name", "发布版"

            //编译生成多个版本
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    if (outputFileName.endsWith('.apk')) {
                        //这里使用之前定义apk文件名称
                        outputFileName = "weibosou_${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                    }
                }
            }
        }
    }

    configurations.all {
        resolutionStrategy.eachDependency { details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion "${project.ANDROID_SUPPORT_VERSION}"
                }
            }
        }
    }

    /**
     * 多渠道
     */
    productFlavors {

        /**
         * 每个flavor 可以覆盖defaultConfig中的所有的值
         */

        febsky {
            dimension "dimension"
            manifestPlaceholders = [CHANNEL_NAME: "fesky"]
        }

    }

    //Java的配置
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dexOptions {
        preDexLibraries = false
        jumboMode = false
    }

    aaptOptions {
        noCompress 'foo', 'bar'
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude '.readme'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'TypographyFractions', 'TypographyQuotes'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //编译libs中的aar包
    fileTree(dir: 'libs', include: '**/*.aar')
            .each { File file ->
        dependencies.add("compile", [
                name: file.name.lastIndexOf('.').with { it != -1 ? file.name[0..<it] : file.name },
                ext : 'aar'
        ])
    }
    testImplementation 'junit:junit:4.12'

    implementation "com.android.support:appcompat-v7:${rootProject.ANDROID_SUPPORT_VERSION}"
    implementation "com.android.support:design:${rootProject.ANDROID_SUPPORT_VERSION}"
    implementation "com.android.support:support-v13:${rootProject.ANDROID_SUPPORT_VERSION}"
    implementation "com.android.support:cardview-v7:${rootProject.ANDROID_SUPPORT_VERSION}"
    implementation "com.android.support:support-v4:${rootProject.ANDROID_SUPPORT_VERSION}"


    implementation 'com.github.satyan:sugar:1.5'
    implementation 'com.mcxiaoke.volley:library:1.0.19'
    implementation 'com.google.code.gson:gson:2.8.1'
    implementation 'in.srain.cube:ultra-ptr:1.0.11'
    implementation('com.makeramen:roundedimageview:2.1.2') {
        //Transitive用于自动处理子依赖项。默认为true，gradle自动添加子依赖项，形成一个多层树形结构；设置为false，则需要手动添加每个依赖项。
        transitive = true
    }
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation 'com.github.chrisbanes:PhotoView:1.3.0'
    implementation 'com.squareup.okhttp3:okhttp:3.8.1'
    implementation 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'
    implementation 'com.orhanobut:logger:1.15'

    // LeanCloud 基础包
    implementation('cn.leancloud.android:avoscloud-sdk:v3.+')
    //一个步骤指示器第三方库
//    compile project(':stepview')

}
